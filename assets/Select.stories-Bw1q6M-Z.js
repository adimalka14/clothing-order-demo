import{j as r,r as m}from"./iframe-DHdCyQc7.js";import{S as s}from"./Select-DfiV_NQ2.js";import"./useTimeout-D0EDQB2X.js";import"./Select-CvPMrveX.js";import"./createSimplePaletteValueFilter-bm0fmN_7.js";import"./Menu-DDL8Aghg.js";import"./useSlot-DGgmD32f.js";import"./Grow-BdHuN-yp.js";import"./index-DuIt2Ws_.js";import"./useControlled-BCeA0D2g.js";import"./createSvgIcon-CmoOJzP0.js";import"./MenuItem-DPXmOxkR.js";import"./ButtonBase-CK_ezoe2.js";import"./isFocusVisible-B8k4qzLc.js";const y={title:"Base-Component/Select",component:s,parameters:{layout:"padded"},tags:["autodocs"],argTypes:{selected:{control:"text"},label:{control:"text"},placeholder:{control:"text"},helperText:{control:"text"},error:{control:"boolean"},disabled:{control:"boolean"},required:{control:"boolean"},size:{control:"radio",options:["small","medium"]},fullWidth:{control:"boolean"},variant:{control:"radio",options:["outlined","filled","standard"]},startCmp:{control:"text"},endCmp:{control:"text"}},args:{selected:""}},l=[{value:"a",label:"Option A"},{value:"b",label:"Option B"},{value:"c",label:"Option C"}],n=e=>{const[t,o]=m.useState("");return r.jsx(s,{...e,id:"default-select",label:"Default Select",selected:t,onChange:a=>o(a.target.value),options:l,helperText:"Choose an option"})},c=e=>{const[t,o]=m.useState("");return r.jsx(s,{...e,id:"placeholder-select",label:"Select with Placeholder",placeholder:"Select one",selected:t,onChange:a=>o(a.target.value),options:l})},p=e=>{const[t,o]=m.useState("");return r.jsx(s,{...e,id:"error-select",label:"Error Select",selected:t,onChange:a=>o(a.target.value),options:l,error:!0,helperText:"This field is required"})},d=e=>r.jsx(s,{...e,id:"disabled-select",label:"Disabled Select",selected:"",onChange:()=>{},options:l,disabled:!0,helperText:"Cannot select an option"}),i=e=>{const[t,o]=m.useState("");return r.jsx(s,{...e,id:"small-select",label:"Small Select",size:"small",selected:t,onChange:a=>o(a.target.value),options:l})},u=e=>{const[t,o]=m.useState("");return r.jsx(s,{...e,id:"adornment-select",label:"Select with Adornments",selected:t,onChange:a=>o(a.target.value),options:l,startCmp:r.jsx("span",{children:"ðŸ‘ˆ"}),endCmp:r.jsx("span",{children:"ðŸ‘‰"})})};n.__docgenInfo={description:"",methods:[],displayName:"Default"};c.__docgenInfo={description:"",methods:[],displayName:"WithPlaceholder"};p.__docgenInfo={description:"",methods:[],displayName:"ErrorState"};d.__docgenInfo={description:"",methods:[],displayName:"Disabled"};i.__docgenInfo={description:"",methods:[],displayName:"SmallSize"};u.__docgenInfo={description:"",methods:[],displayName:"WithStartEndCmp"};n.parameters={...n.parameters,docs:{...n.parameters?.docs,source:{originalSource:`props => {
  const [value, setValue] = useState('');
  return <Select {...props} id="default-select" label="Default Select" selected={value} onChange={e => setValue(e.target.value)} options={options} helperText="Choose an option" />;
}`,...n.parameters?.docs?.source}}};c.parameters={...c.parameters,docs:{...c.parameters?.docs,source:{originalSource:`props => {
  const [value, setValue] = useState('');
  return <Select {...props} id="placeholder-select" label="Select with Placeholder" placeholder="Select one" selected={value} onChange={e => setValue(e.target.value)} options={options} />;
}`,...c.parameters?.docs?.source}}};p.parameters={...p.parameters,docs:{...p.parameters?.docs,source:{originalSource:`props => {
  const [value, setValue] = useState('');
  return <Select {...props} id="error-select" label="Error Select" selected={value} onChange={e => setValue(e.target.value)} options={options} error helperText="This field is required" />;
}`,...p.parameters?.docs?.source}}};d.parameters={...d.parameters,docs:{...d.parameters?.docs,source:{originalSource:'props => <Select {...props} id="disabled-select" label="Disabled Select" selected="" onChange={() => {}} options={options} disabled helperText="Cannot select an option" />',...d.parameters?.docs?.source}}};i.parameters={...i.parameters,docs:{...i.parameters?.docs,source:{originalSource:`props => {
  const [value, setValue] = useState('');
  return <Select {...props} id="small-select" label="Small Select" size="small" selected={value} onChange={e => setValue(e.target.value)} options={options} />;
}`,...i.parameters?.docs?.source}}};u.parameters={...u.parameters,docs:{...u.parameters?.docs,source:{originalSource:`props => {
  const [value, setValue] = useState('');
  return <Select {...props} id="adornment-select" label="Select with Adornments" selected={value} onChange={e => setValue(e.target.value)} options={options} startCmp={<span>ðŸ‘ˆ</span>} endCmp={<span>ðŸ‘‰</span>} />;
}`,...u.parameters?.docs?.source}}};const W=["Default","WithPlaceholder","ErrorState","Disabled","SmallSize","WithStartEndCmp"];export{n as Default,d as Disabled,p as ErrorState,i as SmallSize,c as WithPlaceholder,u as WithStartEndCmp,W as __namedExportsOrder,y as default};
